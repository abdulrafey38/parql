name: Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest pytest-cov
        pip install -r requirements.txt
    - name: Install package for testing
      run: |
        pip install -e .
    - name: Run tests
      run: |
        pytest --cov=parql

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel requests
    - name: Check if version exists on PyPI
      id: check_version
      run: |
        python -c "
        import requests
        import tomllib
        
        # Get current version from pyproject.toml
        with open('pyproject.toml', 'rb') as f:
            config = tomllib.load(f)
        current_version = config['project']['version']
        print(f'Current version: {current_version}')
        
        # Check if version exists on PyPI
        try:
            response = requests.get(f'https://pypi.org/pypi/parql/{current_version}/json', timeout=10)
            if response.status_code == 200:
                print(f'Version {current_version} already exists on PyPI')
                print('skip_upload=true', file=open('$GITHUB_OUTPUT', 'a'))
            else:
                print(f'Version {current_version} does not exist on PyPI')
                print('skip_upload=false', file=open('$GITHUB_OUTPUT', 'a'))
        except Exception as e:
            print(f'Error checking PyPI: {e}')
            print('skip_upload=false', file=open('$GITHUB_OUTPUT', 'a'))
        "
    - name: Debug files
      if: steps.check_version.outputs.skip_upload != 'true'
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Files in workspace ==="
        ls -la
        echo "=== Requirements file content ==="
        cat requirements.txt
    - name: Build package
      if: steps.check_version.outputs.skip_upload != 'true'
      run: python -m build    
    - name: Publish to PyPI
      if: steps.check_version.outputs.skip_upload != 'true'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*
    - name: Skip upload (version already exists)
      if: steps.check_version.outputs.skip_upload == 'true'
      run: |
        echo "âœ… Version already exists on PyPI"
        echo "Skipping upload to avoid duplicate version error"
        echo "This is expected behavior when no version bump is needed" 